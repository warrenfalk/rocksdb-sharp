<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\Versions.targets.include"/>
  <PropertyGroup>
    <Title>RocksDbNative</Title>
    <TargetFrameworks>netstandard1.6;net471</TargetFrameworks>
    <Version>$(RocksDbVersion).$(RocksDbNativeBuild)</Version>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    <FileVersion>$(Version)</FileVersion>
    <Description>Native RocksDb Binaries (Install RocksDbSharp package for managed wrapper)</Description>
    <Authors>Warren Falk</Authors>
    <Company>Warren Falk</Company>
    <Product>Warren Falk</Product>
    <PackageLicenseExpression>BSD-2-Clause</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/warrenfalk/rocksdb-sharp</PackageProjectUrl>
    <PackageIconUrl>http://rocksdb.org/static/logo.svg</PackageIconUrl>
    <RepositoryUrl>https://github.com/warrenfalk/rocksdb-sharp.git</RepositoryUrl>
    <PackageTags>rocksdb leveldb embedded database</PackageTags>
    <Copyright>Copyright 2016</Copyright>
    <PackageReleaseNotes>Native RocksDb Binaries (Install RocksDbSharp package for managed wraper)</PackageReleaseNotes>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
  </PropertyGroup>
  <!-- "DispatchToInnerBuilds" will cause this to run in the outer build (i.e. once regardless of number of frameworks) -->
  <!--  Condition="!Exists('rocksdb-$(RocksDbVersion)\runtimes\win-x64\native\rocksdb.dll') and !Exists('$(BaseIntermediateOutputPath)\rocksdb-v$(RocksDbVersion)-win-x64.zip')" -->
  <!--Target Name="DownloadNativeLibs" BeforeTargets="DispatchToInnerBuilds"-->
    <!-- Here we download the native libraries from the rocksdb-sharp-native project releases according to the version number, if they don't exist -->
    <!--DownloadFile
      Condition="!Exists('$(BaseIntermediateOutputPath)rocksdb-$(RocksDbVersion)\runtimes\%(NativeLib.RuntimeId)\native\%(NativeLib.Lib)') And !Exists('$(BaseIntermediateOutputPath)rocksdb-v$(RocksDbVersion)-%(NativeLib.RuntimeId).zip')"
      SourceUrl="https://github.com/warrenfalk/rocksdb-sharp-native/releases/download/v$(RocksDbVersion)/rocksdb-v$(RocksDbVersion)-%(NativeLib.RuntimeId).zip"
      DestinationFolder="$(BaseIntermediateOutputPath)">
    </DownloadFile>
    <Unzip
      Condition="Exists('$(BaseIntermediateOutputPath)rocksdb-v$(RocksDbVersion)-%(NativeLib.RuntimeId).zip') And !Exists('$(BaseIntermediateOutputPath)rocksdb-$(RocksDbVersion)\runtimes\%(NativeLib.RuntimeId)\native\%(NativeLib.Lib)')"
      SourceFiles="$(BaseIntermediateOutputPath)rocksdb-v$(RocksDbVersion)-%(NativeLib.RuntimeId).zip"
      DestinationFolder="$(BaseIntermediateOutputPath)rocksdb-$(RocksDbVersion)\runtimes\%(NativeLib.RuntimeId)\native\">
    </Unzip>
  </Target-->
  <ItemGroup>
    <!-- Define the native libraries here -->
    <!-- The "Include" attribute is a required attribute in ItemGroups outside of Targets, but I don't know why -->
    <!--NativeLib Include="%(RuntimeId)-%(Lib)" RuntimeId="win-x64" Lib="rocksdb.dll" /-->
    <!--NativeLib Include="%(RuntimeId)-%(Lib)" RuntimeId="osx-x64" Lib="librocksdb.dylib" /-->
    <!-- This "Content" is applied for all "NativeLib" and ensures that it is packaged into the correct folder -->
    <!-- This also will cause it to be copied to the output directory, which was so far the only way to get it
         to work correctly when referenced using a ProjectReference.  When packaged as a nupkg and referenced
         with PackageReference, then these go to the runtimes folders in the nuget cache, which is enough for 
         standard consumers, but framework consumers get them copied from the nuget cache to the output via
         the .targets files for those frameworks.-->
    <None Include="librocksdb.so">
      <Pack>true</Pack>
      <PackagePath>runtimes/linux-x64/native</PackagePath>
    </None>

    <None Include="rocksdb.dll">
      <Pack>true</Pack>
      <PackagePath>runtimes/win-x64/native</PackagePath>
    </None>

    
  </ItemGroup>
</Project>